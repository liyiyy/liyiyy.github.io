<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miss·易</title>
  <subtitle>前端与生活de拼拼凑凑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liyiyy.com/"/>
  <updated>2017-07-19T15:47:55.060Z</updated>
  <id>http://liyiyy.com/</id>
  
  <author>
    <name>LiYi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>整合</title>
    <link href="http://liyiyy.com/2017/07/19/%E6%95%B4%E5%90%88/"/>
    <id>http://liyiyy.com/2017/07/19/整合/</id>
    <published>2017-07-19T12:09:24.000Z</published>
    <updated>2017-07-19T15:47:55.060Z</updated>
    
    <content type="html"><![CDATA[<p>当初是一时兴起啊，搭起来了就没管了，也没更新了，这样是不行的啊，做事情老是半途而废怎么可以呢？要曲线救自己啊！最然各位看官不明白上面的那些话是啥意思，但接下来的时间的工作就是整合自己以前所学，把一些东西彻底的了解！<br>Q：md怎么换行?<br>A：先按入两个以上的空格然后回车。<br>这算是第一个问题吧！  </p>
<ul>
<li>[ ] D1:将自己的博客里的内容整合，更新，完善！<br>搭建博客这种事情就不做了，还有自己实际操作教程，但怎么将博客传上去？？？已经忘记到哪里去了。好记性不如烂笔头啊！  </li>
</ul>
<p>声明：本人喜欢用有道云笔记！<br>创建md文件后另存为到博客站点文件夹下的source\ _posts目录下；在md的头部加上文章标题、时间信息。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">整合</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-07</span><span class="bullet">-19</span> <span class="number">20</span><span class="string">:09:24</span></div><div class="line"><span class="attr">tags:</span>  <span class="string">感想加点料</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<p>以md格式导出到本地，然后copy该md文件，粘贴到你当初建的博客站点文件夹下的source\ _posts目录下，一个md文件对应一篇博客文章。<br>接着在你博客站点文件夹下右键空白处，选择Git Bash Here，输入：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span>       <span class="comment">//回车，生成静态页面</span></div><div class="line">hexo server         <span class="comment">//回车，到localhost:4000预览博客效果</span></div><div class="line">hexo deploy         <span class="comment">//回车，同步到github上去就行了</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当初是一时兴起啊，搭起来了就没管了，也没更新了，这样是不行的啊，做事情老是半途而废怎么可以呢？要曲线救自己啊！最然各位看官不明白上面的那些话是啥意思，但接下来的时间的工作就是整合自己以前所学，把一些东西彻底的了解！&lt;br&gt;Q：md怎么换行?&lt;br&gt;A：先按入两个以上的空格然
    
    </summary>
    
    
      <category term="感想加点料" scheme="http://liyiyy.com/tags/%E6%84%9F%E6%83%B3%E5%8A%A0%E7%82%B9%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>vue-补充</title>
    <link href="http://liyiyy.com/2017/06/20/vue%20%E8%A1%A5%E5%85%85/"/>
    <id>http://liyiyy.com/2017/06/20/vue 补充/</id>
    <published>2017-06-20T12:00:12.000Z</published>
    <updated>2017-07-19T15:57:30.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、关于this"><a href="#1、关于this" class="headerlink" title="1、关于this"></a>1、关于this</h3><h4 id="1-第一种情况"><a href="#1-第一种情况" class="headerlink" title="1)第一种情况"></a>1)第一种情况</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello'</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">      data () &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">list</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</div><div class="line">          <span class="attr">idx</span>: <span class="number">0</span>,</div><div class="line">          <span class="attr">current</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        iter () &#123;</div><div class="line">          <span class="keyword">this</span>.list.map(<span class="function"><span class="keyword">function</span> (<span class="params">v, k</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (k === <span class="keyword">this</span>.idx) &#123;</div><div class="line">              <span class="keyword">this</span>.current = v</div><div class="line">    </div><div class="line">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.current)</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">components</span>: &#123;</div><div class="line">        Hello</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在map里的this是指向当前map的迭代对象，而非我们vue的实例，this里没有我们需要的idx。解决方式有两种；<br>其一是通过保存this<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="number">_</span><span class="keyword">this</span> = <span class="keyword">this</span></div></pre></td></tr></table></figure></p>
<p>其二是使用es6箭头函数<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">    iter () &#123;</div><div class="line">      <span class="keyword">this</span>.list.map(<span class="function"><span class="params">(v, k)</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (k === <span class="keyword">this</span>.idx) &#123;</div><div class="line">          <span class="keyword">this</span>.current = v</div><div class="line"></div><div class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.current)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<h4 id="2-第二种情况"><a href="#2-第二种情况" class="headerlink" title="2)第二种情况"></a>2)第二种情况</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> @click=<span class="string">"check"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">   <span class="built_in"> check </span>() &#123;</div><div class="line">        alert('ok')</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确写法：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">   <span class="built_in"> check </span>() &#123;</div><div class="line">        window.alert('ok')</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2、方法传值"><a href="#2、方法传值" class="headerlink" title="2、方法传值"></a>2、方法传值</h3><p>我们在input中的方法希望获取input的value，可以通过$event这个对象，通过将$event传入方法,我们可以成功的拿到我们希望的值<br><figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> value=<span class="string">"value"</span> <span class="meta">@input</span>=<span class="string">"change(<span class="variable">$event</span>)"</span>/&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">change (e) &#123;</div><div class="line">  console.log(e<span class="selector-class">.target</span><span class="selector-class">.value</span>)</div><div class="line">  this<span class="selector-class">.value</span> = e<span class="selector-class">.target</span><span class="selector-class">.value</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、迭代判断"><a href="#3、迭代判断" class="headerlink" title="3、迭代判断"></a>3、迭代判断</h3><p>比如我们有一个列表，我们希望能显示我们当前选中的那一个，基本思路是通过$index来判断是否是当前迭代对象，然后去增减class或者style来实现不同的样式<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">  <span class="comment">&lt;!-- 方法1 class--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;'active': $index === activeId&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 方法2 style--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:style</span>=<span class="string">"</span></span><span class="template-variable">&#123;backgroundColor: $index === activeId ? 'red' : 'white'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">data () <span class="template-variable">&#123;</span></div><div class="line">  return &#123;</div><div class="line">    list: ['a', 'b', 'c'],</div><div class="line">    activeId: 0</div><div class="line">  &#125;<span class="xml"></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4、渲染"><a href="#4、渲染" class="headerlink" title="4、渲染"></a>4、渲染</h3><p>点击菜单一个组件加载出来表格列表,输入查询条件查询,当在单击这个菜单后表格的数据没有重置查询条件和查询结果.</p>
<p>Vue路由在页面渲染一个组件后加载后,再加载这个组件,组件不会摧毁后在重新生成这个组件,不会重新触发组件的生命周期中的方法；在开发中这个问题在两个菜单共用一个组件,设置传参来判断加载不同的数据的情况下,会出现另一个ready方法不走导致数据显示不真确.解决思路可以加监听路由地址触发ready事件.</p>
<p>而上面的解决方法是用v-if来重新加载组件。</p>
<h3 id="5、多页面"><a href="#5、多页面" class="headerlink" title="5、多页面"></a>5、多页面</h3><p>多页面方式一样也可以使用vue强大的组件系统和脚手架。在github.com搜索“vue2 multipage”,会得到不少多页面脚手架</p>
<h3 id="6、elemeui"><a href="#6、elemeui" class="headerlink" title="6、elemeui"></a>6、elemeui</h3><h3 id="7、异常1"><a href="#7、异常1" class="headerlink" title="7、异常1"></a>7、异常1</h3><p>用vue做项目的时候，抛出异常:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOMException: Failed to execute 'insertBefore' on '<span class="keyword">Node</span><span class="title">': The</span> <span class="keyword">node</span> <span class="title">before</span> which the new <span class="keyword">node</span> <span class="title">is</span> to be inserted is not a child of this <span class="keyword">node</span>.<span class="title"></span></div></pre></td></tr></table></figure></p>
<p>和v-if和v-show有关系；对需要渲染的模板外层添加<div v-if="isShow"><div v-for=""></div></div>,点击按钮开始请求数据的时候@click=”isShow=false”, 当成功请求数据时,在回调函数中cb(isShow=ture). 保证 更新数据的时候先移除后插入    </p>
<h3 id="8、存储问题"><a href="#8、存储问题" class="headerlink" title="8、存储问题"></a>8、存储问题</h3><p>localstorage存储满了；</p>
<h3 id="9、传值问题"><a href="#9、传值问题" class="headerlink" title="9、传值问题"></a>9、传值问题</h3><p>页面之间传值，父子组件之间的传值；</p>
<h3 id="10、跨域问题"><a href="#10、跨域问题" class="headerlink" title="10、跨域问题"></a>10、跨域问题</h3><p>跨域保证数据安全</p>
<h3 id="11、移动设备兼容问题"><a href="#11、移动设备兼容问题" class="headerlink" title="11、移动设备兼容问题"></a>11、移动设备兼容问题</h3><p>2X和3X<br>安卓机兼容问题</p>
<h3 id="12、多页面vue搭建"><a href="#12、多页面vue搭建" class="headerlink" title="12、多页面vue搭建"></a>12、多页面vue搭建</h3><h3 id="13、seo优化"><a href="#13、seo优化" class="headerlink" title="13、seo优化"></a>13、seo优化</h3><p><a href="http://cnodejs.org/topic/5750d752491b9c4f36910fec" target="_blank" rel="external">参考</a></p>
<p>vue2 multipage</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、关于this&quot;&gt;&lt;a href=&quot;#1、关于this&quot; class=&quot;headerlink&quot; title=&quot;1、关于this&quot;&gt;&lt;/a&gt;1、关于this&lt;/h3&gt;&lt;h4 id=&quot;1-第一种情况&quot;&gt;&lt;a href=&quot;#1-第一种情况&quot; class=&quot;header
    
    </summary>
    
    
      <category term="vue" scheme="http://liyiyy.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue搭建项目案例分析</title>
    <link href="http://liyiyy.com/2017/05/06/vue%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>http://liyiyy.com/2017/05/06/vue搭建项目案例分析/</id>
    <published>2017-05-06T09:28:40.000Z</published>
    <updated>2017-05-06T12:38:06.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等"><a href="#从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等" class="headerlink" title="从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等"></a>从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等</h3><p>1、在项目立项时，所有相关人员（产品、UI、前端、后端、测试）开产品会议，产品会根据市场调研分析、市场需求、产品定位、盈利模式等给出需求说明书和设计出原型图。讨论具体的功能模块和跳转逻辑，一起讨论交流原型，不足之处进行改进完善。</p>
<p>2、UI会根据开会内容设计出效果图，然后开会开发人员这边还需要根据需求和所掌握的技术讨论采用什么开发框架。UI设计出效果图给产品，产品还会跟客户交涉，看是否效果图能达到客户预期。达到预期后，就会开始分工合作。<br>项目原型图：<br><img src="/2017/05/06/vue搭建项目案例分析/2017-05-06_173354.png" alt="原型图">；<br>4、各类的方案通过后，就根据任务安排 评估项目所需要的时间。评估出 产品、UI、前端、后端、测试的开发时间，找到最节省时间、效率最高的的开发方案。<br>5，UI将设计好的图给前端，前端开始用模拟的数据写静态的页面，并同后台商量需要的数据格式；让后端写数据并写好接口给前端人员，并给出接口文档说明书；<br>6，接口和静态页面写好后就要前后台联调，跑通后就交付给测试人员去测试，生产环境测试，开发环境测试；然后反馈修改，最后通过项目模拟上线测试就可以上线了。</p>
<h3 id="用vue搭建项目流程-从0-1——aixianmian-vue-框架搭建"><a href="#用vue搭建项目流程-从0-1——aixianmian-vue-框架搭建" class="headerlink" title="用vue搭建项目流程-从0-1——aixianmian_vue 框架搭建"></a>用vue搭建项目流程-从0-1——aixianmian_vue 框架搭建</h3><h5 id="demo示例："><a href="#demo示例：" class="headerlink" title="demo示例："></a>demo示例：</h5><p>注意：vue分为单页面和多页面应用之分，项目比较小的就用单页面应用，项目大就用多页面应用。只是搭建个小的demo,单页面就搞定了。<br>项目的 vue2.0 + vue-cli + webpack + vue-router2.0</p>
<p>1.安装Vue2.0<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> vue</div></pre></td></tr></table></figure></p>
<p>2.安装vue-cli 脚手架工具<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install --<span class="built_in">global</span> vue-cli</div></pre></td></tr></table></figure></p>
<p>3.在某个目录下，创建一个基于 webpack 模板的新项目<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack my-<span class="keyword">project</span>			//my-<span class="keyword">project</span>是你的项目名</div></pre></td></tr></table></figure></p>
<p>4.安装依赖<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd my-<span class="keyword">project</span>  <span class="comment">//到项目目录下</span></div><div class="line">npm install  <span class="comment">//安装依赖</span></div></pre></td></tr></table></figure></p>
<p>6.运行vue项目<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="built_in">run</span> dev		<span class="comment">//一个简单的vue项目就好了</span></div></pre></td></tr></table></figure></p>
<p>7.安装路由<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> vue-router</div></pre></td></tr></table></figure></p>
<h5 id="基础的安装工作就做好了，下面开始来写配置和代码"><a href="#基础的安装工作就做好了，下面开始来写配置和代码" class="headerlink" title="基础的安装工作就做好了，下面开始来写配置和代码"></a>基础的安装工作就做好了，下面开始来写配置和代码</h5><p>1，项目整体目录目录：<br><img src="/2017/05/06/vue搭建项目案例分析/2017-05-06_185245.png" alt="项目目录">；<br>单页面应用主要写代码的部分在src文件夹下,组建部分在的components的以Vue结尾的文件中；<br>2，路由 部分在router下的index.js中配置 ；vue的引入、输出的语法是参ES6的语法，用import引入，export输出。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> LimitFree <span class="keyword">from</span> <span class="string">'@/components/limitFree'</span></div><div class="line"><span class="keyword">import</span> Free <span class="keyword">from</span> <span class="string">'@/components/free'</span></div><div class="line"><span class="keyword">import</span> Zhuanti <span class="keyword">from</span> <span class="string">'@/components/zhuanti'</span></div><div class="line"><span class="keyword">import</span> Hotlist <span class="keyword">from</span> <span class="string">'@/components/hotlist'</span></div><div class="line"><span class="keyword">import</span> Sale <span class="keyword">from</span> <span class="string">'@/components/sale'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/LimitFree'</span>,</div><div class="line"><span class="regexp">//</span>    name: <span class="string">'Hello'</span>,</div><div class="line">      component: LimitFree</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/Free'</span>,</div><div class="line"><span class="regexp">//</span>    name: <span class="string">'Hello'</span>,</div><div class="line">      component: Free</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/Zhuanti'</span>,</div><div class="line"><span class="regexp">//</span>    name: <span class="string">'Hello'</span>,</div><div class="line">      component: Zhuanti</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/Hotlist'</span>,</div><div class="line"><span class="regexp">//</span>    name: <span class="string">'Hello'</span>,</div><div class="line">      component: Hotlist</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/Sale'</span>,</div><div class="line"><span class="regexp">//</span>    name: <span class="string">'Hello'</span>,</div><div class="line">      component: Sale</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'*'</span>,</div><div class="line">      redirect: <span class="string">'/LimitFree'</span></div><div class="line"><span class="regexp">//</span>    name: <span class="string">'Hello'</span>,</div><div class="line">    &#125;    </div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>3，vue在2.0版本中的组件模板需要一个外围标签包裹，否则会报错。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"limitFree"</span>&gt;</span></div><div class="line">  	要用一个div 包裹住；现在   在这块就可以正式开始你的代码了；</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	写组建的样式</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	写组建的处理代码</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4，组件传值完整示例；父级传给子级，子级传给父级，同级之间的传值；<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue2.0/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">aaa</span>&gt;</span><span class="tag">&lt;/<span class="name">aaa</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">bbb</span>&gt;</span><span class="tag">&lt;/<span class="name">bbb</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ccc</span>&gt;</span><span class="tag">&lt;/<span class="name">ccc</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">			<span class="comment">//创建一个空的vue实例，专门用来处理组件于组件之间通信的事件</span></div><div class="line">			<span class="keyword">var</span> myEvent = <span class="keyword">new</span> Vue();</div><div class="line">		</div><div class="line">			<span class="keyword">var</span> aCom = &#123;</div><div class="line">				template: `</div><div class="line">					&lt;div&gt;</div><div class="line">						&lt;h1&gt;这是a组件&lt;/h1&gt;</div><div class="line">						&lt;p&gt;<span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></div><div class="line">						<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'sendMsg()'</span>&gt;</span>将数据给c<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				`,</div><div class="line">				data()&#123;</div><div class="line">					return &#123;</div><div class="line">						msg: '这是a的数据'</div><div class="line">					&#125;</div><div class="line">				&#125;,</div><div class="line">				methods: &#123;</div><div class="line">					sendMsg()&#123;</div><div class="line">						myEvent.$emit('a-send', this.msg, 123);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			var bCom = &#123;</div><div class="line">				template: `</div><div class="line">					<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是b组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></div><div class="line">						<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'sendMsg()'</span>&gt;</span>将数据给c<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				`,</div><div class="line">				data()&#123;</div><div class="line">					return &#123;</div><div class="line">						msg: '这是b的数据'</div><div class="line">					&#125;</div><div class="line">				&#125;,</div><div class="line">				methods: &#123;</div><div class="line">					sendMsg()&#123;</div><div class="line">						//发送数据</div><div class="line">						myEvent.$emit('b-send', this.msg)</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			var cCom = &#123;</div><div class="line">				template: `</div><div class="line">					<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是c组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是从a组件接收的:<span class="template-variable">&#123;&#123;aMsg&#125;&#125;</span><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></div><div class="line">						<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是从b组件接收的:<span class="template-variable">&#123;&#123;bMsg&#125;&#125;</span><span class="xml"><span class="actionscript">&lt;/p&gt;</span></span></div><div class="line">					&lt;/div&gt;</div><div class="line">				`,</div><div class="line">				data()&#123;</div><div class="line">					<span class="keyword">return</span> &#123;</div><div class="line">						aMsg: <span class="string">'111'</span>,</div><div class="line">						bMsg: <span class="string">''</span></div><div class="line">					&#125;</div><div class="line">				&#125;,</div><div class="line">				mounted()&#123;</div><div class="line">					</div><div class="line">					<span class="comment">//接收事件</span></div><div class="line">					myEvent.$on(<span class="string">'a-send'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data1, data2)</span></span>&#123;</div><div class="line">						console.log(data1)</div><div class="line">						<span class="keyword">this</span>.aMsg = data1;</div><div class="line">						console.log(<span class="keyword">this</span>.aMsg)</div><div class="line">					&#125;.bind(<span class="keyword">this</span>))</div><div class="line">					</div><div class="line">					myEvent.$on(<span class="string">'b-send'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</div><div class="line">						console.log(data)</div><div class="line">						<span class="keyword">this</span>.bMsg = data</div><div class="line">					&#125;.bind(<span class="keyword">this</span>))</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			</div><div class="line">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">				el: <span class="string">'#app'</span>,</div><div class="line">				components: &#123;</div><div class="line">					<span class="string">'aaa'</span>: aCom,</div><div class="line">					<span class="string">'bbb'</span>: bCom,</div><div class="line">					<span class="string">'ccc'</span>: cCom</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">			</div><div class="line">			</div><div class="line">			</div><div class="line">			</div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		</div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等&quot;&gt;&lt;a href=&quot;#从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等&quot; class=&quot;headerlink&quot; title=&quot;从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5.3——hexo补充</title>
    <link href="http://liyiyy.com/2017/05/03/5-3hexo%E8%A1%A5%E5%85%85/"/>
    <id>http://liyiyy.com/2017/05/03/5-3hexo补充/</id>
    <published>2017-05-03T12:29:44.000Z</published>
    <updated>2017-07-19T15:38:53.110Z</updated>
    
    <content type="html"><![CDATA[<p>1&gt;解决上次遗留下的图片问题,重新创立了上个文件上个后的时间变成了这个文件之后的时间，所以正确的说是下一篇文章，不是懒，是不想改；哈哈哈</p>
<p>1、首先将目录下_config.yml文件中的 post_asset_folder: true  像这样修改为true<br>2、打开git；执行    npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>3、在使用命令   hexo new “hexo补充”  新建一个md文件，发现会多出个文件夹，可以将需要引入的资源（图片）放在这个文件夹中；<br>4、引用   <img src="/2017/05/03/5-3hexo补充/下载.jpg" alt="image"></p>
<p>2&gt;博客优化</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1&amp;gt;解决上次遗留下的图片问题,重新创立了上个文件上个后的时间变成了这个文件之后的时间，所以正确的说是下一篇文章，不是懒，是不想改；哈哈哈&lt;/p&gt;
&lt;p&gt;1、首先将目录下_config.yml文件中的 post_asset_folder: true  像这样修改为tru
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github+hexo搭建个人静态博客（一 搭建）</title>
    <link href="http://liyiyy.com/2017/05/02/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80-%E6%90%AD%E5%BB%BA%EF%BC%89/"/>
    <id>http://liyiyy.com/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/</id>
    <published>2017-05-02T14:00:12.000Z</published>
    <updated>2017-07-19T15:40:35.663Z</updated>
    
    <content type="html"><![CDATA[<p>1、先看成果—-<br><a href="http://liyiyy.com/">Miss·易</a></p>
<p>2、工具+版本<br>    npm   3.10.8<br>    git Shell</p>
<p>3、开始<br>    1),先从简单的开始；<br>    先去github里创建一个repository;如图;<br>    <img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-25_001949.png" alt="image"><br>    创建后的页面<br>    <img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-25_002602.png" alt="image"></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> install hexo-cli -g       <span class="regexp">//</span>打开git命令行，执行第一行命令安装Hexo，注意；我所实践中发现；<span class="built_in">npm</span>命令可以在git中用，但反过来不行</div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> hexo init blog   <span class="comment">//初始化博客文件，我的博客的本地文件夹名就是blog；但是建议与github仓库命一样，例如我的就是liyiyy.github.io</span></div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> cd blog       <span class="comment">//进入到刚创建好的blog中,执行下一步</span></div></pre></td></tr></table></figure>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">server</span>     <span class="comment">//  开启服务</span></div></pre></td></tr></table></figure>
<p>当出现如下图所示时：<img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-24_233958.png" alt="image"><br><a href="github-hexo搭建个人静态博客（一-搭建）/2017-04-24_233958.png">link</a><br>在浏览器中输入localhost:4000就可以访问本地的博客了,就可以看见一个简单的博客就基本成型了，看成果。。。<br><img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-24_235010.png" alt="image"></p>
<pre><code>2）修改主题，配置等
</code></pre><p>先下载主题，我用的是next主题</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></div></pre></td></tr></table></figure>
<p>下载好后就来修改根目录下的_config.yml文件，为了防止改错，可以先备份一份，打开这个文件时最好用常用的编辑器打开，方便查看，用记事本打开完全乱掉<br><img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-25_000436.png" alt="image"><br>==修改时还要注意，属性冒号后面要空一格再写值，否侧会出错==</p>
<p>a),修改个人信息</p>
<p><img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-25_000711.png" alt="image"><br>b),修改主题信息，将原来的主题删掉，改成下载的next主题；<br><img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-25_000956.png" alt="image"><br>c),重点，上传到github上的配置；只要将地址改成你自己的就行了；地址上面有提到过</p>
<p><img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/2017-04-25_001421.png" alt="image"></p>
<pre><code>3）执行命令上传
hexo clean
hexo g
hexo d
</code></pre><p>上传成功后就可以在浏览器中输入你的网址了，例如我的；liyiyy.github.io 就可以看见已经成功了</p>
<p>4） 绑定自己的域名<br>a).先去买个域名，我的是在阿里云上买的；然后解析域名，添加解析记录，如：<br><img src="/2017/05/02/github-hexo搭建个人静态博客（一-搭建）/QQ截图20170425092548.png" alt="image"></p>
<p>b).在source文件夹下创建CHAME文件(为什么要在source文件夹下写，是为了以后上传文件时避免覆盖，不要后缀，可以用cmd黑窗口命令行创建，也可以用编辑器创建；里面只需要写域名就好了例如我的就是liyiyy.com，不需要写WWW;</p>
<p>好了过段时间，就可以打开你的域名访问了<br>打开我的—liyiyy.com<br>成功！</p>
<p>=========================途中所遇到的问题=========================</p>
<p>1,本地测试成功，上传到github后不能打开？<br>    这里卡壳了好多天，上传上去后一直会给我发邮件说创建页面失败，后面按照简洁的做法，没有先安装主题，直接初始化后就上传了，然后也没出问题，后来仔细阅读邮件后发现可能是主题安装的版本与github上的东西不兼容。</p>
<p>2，绑定域名的时候绑定成功了，但就是不显示内容，整个页面只有EOF？<br>    之前一直是在手机上解析域名的，也没有报什么原因，在电脑上解析的时候报出出错原因是域名冲突了，刚注册的域名会有很多的解析的东西，后来没办法，简单粗暴的把其他的直接删除了，没出问题了；不知道这有什么不妥；</p>
<p>3，发现局限性不知道怎么破？<br>    在本地添加的图片在部署后不会显示出来；用github图片的链接也没用；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、先看成果—-&lt;br&gt;&lt;a href=&quot;http://liyiyy.com/&quot;&gt;Miss·易&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、工具+版本&lt;br&gt;    npm   3.10.8&lt;br&gt;    git Shell&lt;/p&gt;
&lt;p&gt;3、开始&lt;br&gt;    1),先从简单的开始；&lt;br
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liyiyy.com/2017/04/13/hello-world/"/>
    <id>http://liyiyy.com/2017/04/13/hello-world/</id>
    <published>2017-04-13T14:27:27.180Z</published>
    <updated>2017-04-13T14:27:27.185Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
