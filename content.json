[{"title":"整合2","date":"2017-07-20T12:07:08.000Z","path":"2017/07/20/整合2/","text":"[ ] hexo博客框架完善探究 [ ] hexo在线编辑的实现 https://www.zhihu.com/question/27384681 [ ] github图片上传保存，方便md图片插入，问题来了，GitHub空间大小有限制，有别的更好的替代方案吗？","tags":[{"name":"计划","slug":"计划","permalink":"http://liyiyy.com/tags/计划/"}]},{"title":"整合","date":"2017-07-19T12:09:24.000Z","path":"2017/07/19/整合/","text":"当初是一时兴起啊，搭起来了就没管了，也没更新了，这样是不行的啊，做事情老是半途而废怎么可以呢？要曲线救自己啊！最然各位看官不明白上面的那些话是啥意思，但接下来的时间的工作就是整合自己以前所学，把一些东西彻底的了解！Q：md怎么换行?A：先按入两个以上的空格然后回车。这算是第一个问题吧！ [ ] D1:将自己的博客里的内容整合，更新，完善！搭建博客这种事情就不做了，还有自己实际操作教程，但怎么将博客传上去？？？已经忘记到哪里去了。好记性不如烂笔头啊！ 声明：本人喜欢用有道云笔记！创建md文件后另存为到博客站点文件夹下的source\\ _posts目录下；在md的头部加上文章标题、时间信息。12345---title: 整合date: 2017-07-19 20:09:24tags: 感想加点料--- 以md格式导出到本地，然后copy该md文件，粘贴到你当初建的博客站点文件夹下的source\\ _posts目录下，一个md文件对应一篇博客文章。接着在你博客站点文件夹下右键空白处，选择Git Bash Here，输入：123hexo generate //回车，生成静态页面hexo server //回车，到localhost:4000预览博客效果hexo deploy //回车，同步到github上去就行了","tags":[{"name":"感想加点料","slug":"感想加点料","permalink":"http://liyiyy.com/tags/感想加点料/"}]},{"title":"vue-补充","date":"2017-06-20T12:00:12.000Z","path":"2017/06/20/vue 补充/","text":"1、关于this1)第一种情况1234567891011121314151617181920212223242526&lt;script&gt; import Hello from './components/Hello' export default &#123; data () &#123; return &#123; list: ['a', 'b', 'c'], idx: 0, current: '' &#125; &#125;, methods: &#123; iter () &#123; this.list.map(function (v, k) &#123; if (k === this.idx) &#123; this.current = v console.log(this.current) &#125; &#125;) &#125; &#125;, components: &#123; Hello &#125; &#125;&lt;/script&gt; 在map里的this是指向当前map的迭代对象，而非我们vue的实例，this里没有我们需要的idx。解决方式有两种；其一是通过保存this1let _this = this 其二是使用es6箭头函数1234567891011methods: &#123; iter () &#123; this.list.map((v, k) =&gt; &#123; if (k === this.idx) &#123; this.current = v console.log(this.current) &#125; &#125;) &#125; &#125;, 2)第二种情况1&lt;div @click=\"check\"&gt;&lt;/div&gt; 12345methods: &#123; check () &#123; alert('ok') &#125;&#125; 正确写法：12345methods: &#123; check () &#123; window.alert('ok') &#125;&#125; 2、方法传值我们在input中的方法希望获取input的value，可以通过$event这个对象，通过将$event传入方法,我们可以成功的拿到我们希望的值1&lt;input type=\"text\" value=\"value\" @input=\"change($event)\"/&gt; 1234change (e) &#123; console.log(e.target.value) this.value = e.target.value&#125; 3、迭代判断比如我们有一个列表，我们希望能显示我们当前选中的那一个，基本思路是通过$index来判断是否是当前迭代对象，然后去增减class或者style来实现不同的样式1234567891011121314&lt;ul&gt; &lt;!-- 方法1 class--&gt; &lt;li v-for=\"item in list\" :class=\"&#123;'active': $index === activeId&#125;\"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt; &lt;!-- 方法2 style--&gt; &lt;li v-for=\"item in list\" :style=\"&#123;backgroundColor: $index === activeId ? 'red' : 'white'&#125;\"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;data () &#123; return &#123; list: ['a', 'b', 'c'], activeId: 0 &#125;&#125; 4、渲染点击菜单一个组件加载出来表格列表,输入查询条件查询,当在单击这个菜单后表格的数据没有重置查询条件和查询结果. Vue路由在页面渲染一个组件后加载后,再加载这个组件,组件不会摧毁后在重新生成这个组件,不会重新触发组件的生命周期中的方法；在开发中这个问题在两个菜单共用一个组件,设置传参来判断加载不同的数据的情况下,会出现另一个ready方法不走导致数据显示不真确.解决思路可以加监听路由地址触发ready事件. 而上面的解决方法是用v-if来重新加载组件。 5、多页面多页面方式一样也可以使用vue强大的组件系统和脚手架。在github.com搜索“vue2 multipage”,会得到不少多页面脚手架 6、elemeui7、异常1用vue做项目的时候，抛出异常:1DOMException: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node. 和v-if和v-show有关系；对需要渲染的模板外层添加,点击按钮开始请求数据的时候@click=”isShow=false”, 当成功请求数据时,在回调函数中cb(isShow=ture). 保证 更新数据的时候先移除后插入 8、存储问题localstorage存储满了； 9、传值问题页面之间传值，父子组件之间的传值； 10、跨域问题跨域保证数据安全 11、移动设备兼容问题2X和3X安卓机兼容问题 12、多页面vue搭建13、seo优化参考 vue2 multipage","tags":[{"name":"vue","slug":"vue","permalink":"http://liyiyy.com/tags/vue/"}]},{"title":"vue搭建项目案例分析","date":"2017-05-06T09:28:40.000Z","path":"2017/05/06/vue搭建项目案例分析/","text":"从0到1怎么做的流程，产品-设计-前端-后端-测试-上线等1、在项目立项时，所有相关人员（产品、UI、前端、后端、测试）开产品会议，产品会根据市场调研分析、市场需求、产品定位、盈利模式等给出需求说明书和设计出原型图。讨论具体的功能模块和跳转逻辑，一起讨论交流原型，不足之处进行改进完善。 2、UI会根据开会内容设计出效果图，然后开会开发人员这边还需要根据需求和所掌握的技术讨论采用什么开发框架。UI设计出效果图给产品，产品还会跟客户交涉，看是否效果图能达到客户预期。达到预期后，就会开始分工合作。项目原型图：；4、各类的方案通过后，就根据任务安排 评估项目所需要的时间。评估出 产品、UI、前端、后端、测试的开发时间，找到最节省时间、效率最高的的开发方案。5，UI将设计好的图给前端，前端开始用模拟的数据写静态的页面，并同后台商量需要的数据格式；让后端写数据并写好接口给前端人员，并给出接口文档说明书；6，接口和静态页面写好后就要前后台联调，跑通后就交付给测试人员去测试，生产环境测试，开发环境测试；然后反馈修改，最后通过项目模拟上线测试就可以上线了。 用vue搭建项目流程-从0-1——aixianmian_vue 框架搭建demo示例：注意：vue分为单页面和多页面应用之分，项目比较小的就用单页面应用，项目大就用多页面应用。只是搭建个小的demo,单页面就搞定了。项目的 vue2.0 + vue-cli + webpack + vue-router2.0 1.安装Vue2.01npm install vue 2.安装vue-cli 脚手架工具1npm install --global vue-cli 3.在某个目录下，创建一个基于 webpack 模板的新项目1vue init webpack my-project //my-project是你的项目名 4.安装依赖12cd my-project //到项目目录下npm install //安装依赖 6.运行vue项目1npm run dev //一个简单的vue项目就好了 7.安装路由1npm install vue-router 基础的安装工作就做好了，下面开始来写配置和代码1，项目整体目录目录：；单页面应用主要写代码的部分在src文件夹下,组建部分在的components的以Vue结尾的文件中；2，路由 部分在router下的index.js中配置 ；vue的引入、输出的语法是参ES6的语法，用import引入，export输出。1234567891011121314151617181920212223242526272829303132333435363738394041424344import Vue from 'vue'import Router from 'vue-router'import LimitFree from '@/components/limitFree'import Free from '@/components/free'import Zhuanti from '@/components/zhuanti'import Hotlist from '@/components/hotlist'import Sale from '@/components/sale'Vue.use(Router)export default new Router(&#123; routes: [ &#123; path: '/LimitFree',// name: 'Hello', component: LimitFree &#125;, &#123; path: '/Free',// name: 'Hello', component: Free &#125;, &#123; path: '/Zhuanti',// name: 'Hello', component: Zhuanti &#125;, &#123; path: '/Hotlist',// name: 'Hello', component: Hotlist &#125;, &#123; path: '/Sale',// name: 'Hello', component: Sale &#125;, &#123; path: '*', redirect: '/LimitFree'// name: 'Hello', &#125; ]&#125;) 3，vue在2.0版本中的组件模板需要一个外围标签包裹，否则会报错。1234567891011&lt;template&gt; &lt;div id=\"limitFree\"&gt; 要用一个div 包裹住；现在 在这块就可以正式开始你的代码了； &lt;/div&gt;&lt;/template&gt;&lt;style&gt; 写组建的样式&lt;/style&gt;&lt;script&gt; 写组建的处理代码&lt;/script&gt; 4，组件传值完整示例；父级传给子级，子级传给父级，同级之间的传值；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"vue2.0/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; &lt;aaa&gt;&lt;/aaa&gt; &lt;hr /&gt; &lt;bbb&gt;&lt;/bbb&gt; &lt;hr /&gt; &lt;ccc&gt;&lt;/ccc&gt; &lt;/div&gt; &lt;script&gt; //创建一个空的vue实例，专门用来处理组件于组件之间通信的事件 var myEvent = new Vue(); var aCom = &#123; template: ` &lt;div&gt; &lt;h1&gt;这是a组件&lt;/h1&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; &lt;button @click='sendMsg()'&gt;将数据给c&lt;/button&gt; &lt;/div&gt; `, data()&#123; return &#123; msg: '这是a的数据' &#125; &#125;, methods: &#123; sendMsg()&#123; myEvent.$emit('a-send', this.msg, 123); &#125; &#125; &#125; var bCom = &#123; template: ` &lt;div&gt; &lt;h1&gt;这是b组件&lt;/h1&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; &lt;button @click='sendMsg()'&gt;将数据给c&lt;/button&gt; &lt;/div&gt; `, data()&#123; return &#123; msg: '这是b的数据' &#125; &#125;, methods: &#123; sendMsg()&#123; //发送数据 myEvent.$emit('b-send', this.msg) &#125; &#125; &#125; var cCom = &#123; template: ` &lt;div&gt; &lt;h1&gt;这是c组件&lt;/h1&gt; &lt;p&gt;这是从a组件接收的:&#123;&#123;aMsg&#125;&#125;&lt;/p&gt; &lt;p&gt;这是从b组件接收的:&#123;&#123;bMsg&#125;&#125;&lt;/p&gt; &lt;/div&gt; `, data()&#123; return &#123; aMsg: '111', bMsg: '' &#125; &#125;, mounted()&#123; //接收事件 myEvent.$on('a-send', function(data1, data2)&#123; console.log(data1) this.aMsg = data1; console.log(this.aMsg) &#125;.bind(this)) myEvent.$on('b-send', function(data)&#123; console.log(data) this.bMsg = data &#125;.bind(this)) &#125; &#125; var vm = new Vue(&#123; el: '#app', components: &#123; 'aaa': aCom, 'bbb': bCom, 'ccc': cCom &#125; &#125;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","tags":[]},{"title":"5.3——hexo补充","date":"2017-05-03T12:29:44.000Z","path":"2017/05/03/5-3hexo补充/","text":"1&gt;解决上次遗留下的图片问题,重新创立了上个文件上个后的时间变成了这个文件之后的时间，所以正确的说是下一篇文章，不是懒，是不想改；哈哈哈 1、首先将目录下_config.yml文件中的 post_asset_folder: true 像这样修改为true2、打开git；执行 npm install https://github.com/CodeFalling/hexo-asset-image –save3、在使用命令 hexo new “hexo补充” 新建一个md文件，发现会多出个文件夹，可以将需要引入的资源（图片）放在这个文件夹中；4、引用 2&gt;博客优化","tags":[]},{"title":"github+hexo搭建个人静态博客（一 搭建）","date":"2017-05-02T14:00:12.000Z","path":"2017/05/02/github-hexo搭建个人静态博客（一-搭建）/","text":"1、先看成果—-Miss·易 2、工具+版本 npm 3.10.8 git Shell 3、开始 1),先从简单的开始； 先去github里创建一个repository;如图; 创建后的页面 1$ npm install hexo-cli -g //打开git命令行，执行第一行命令安装Hexo，注意；我所实践中发现；npm命令可以在git中用，但反过来不行 1$ hexo init blog //初始化博客文件，我的博客的本地文件夹名就是blog；但是建议与github仓库命一样，例如我的就是liyiyy.github.io 1$ cd blog //进入到刚创建好的blog中,执行下一步 1$ hexo server // 开启服务 当出现如下图所示时：link在浏览器中输入localhost:4000就可以访问本地的博客了,就可以看见一个简单的博客就基本成型了，看成果。。。 2）修改主题，配置等 先下载主题，我用的是next主题 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 下载好后就来修改根目录下的_config.yml文件，为了防止改错，可以先备份一份，打开这个文件时最好用常用的编辑器打开，方便查看，用记事本打开完全乱掉==修改时还要注意，属性冒号后面要空一格再写值，否侧会出错== a),修改个人信息 b),修改主题信息，将原来的主题删掉，改成下载的next主题；c),重点，上传到github上的配置；只要将地址改成你自己的就行了；地址上面有提到过 3）执行命令上传 hexo clean hexo g hexo d 上传成功后就可以在浏览器中输入你的网址了，例如我的；liyiyy.github.io 就可以看见已经成功了 4） 绑定自己的域名a).先去买个域名，我的是在阿里云上买的；然后解析域名，添加解析记录，如： b).在source文件夹下创建CHAME文件(为什么要在source文件夹下写，是为了以后上传文件时避免覆盖，不要后缀，可以用cmd黑窗口命令行创建，也可以用编辑器创建；里面只需要写域名就好了例如我的就是liyiyy.com，不需要写WWW; 好了过段时间，就可以打开你的域名访问了打开我的—liyiyy.com成功！ =========================途中所遇到的问题========================= 1,本地测试成功，上传到github后不能打开？ 这里卡壳了好多天，上传上去后一直会给我发邮件说创建页面失败，后面按照简洁的做法，没有先安装主题，直接初始化后就上传了，然后也没出问题，后来仔细阅读邮件后发现可能是主题安装的版本与github上的东西不兼容。 2，绑定域名的时候绑定成功了，但就是不显示内容，整个页面只有EOF？ 之前一直是在手机上解析域名的，也没有报什么原因，在电脑上解析的时候报出出错原因是域名冲突了，刚注册的域名会有很多的解析的东西，后来没办法，简单粗暴的把其他的直接删除了，没出问题了；不知道这有什么不妥； 3，发现局限性不知道怎么破？ 在本地添加的图片在部署后不会显示出来；用github图片的链接也没用；","tags":[]},{"title":"Hello World","date":"2017-04-13T14:27:27.180Z","path":"2017/04/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]